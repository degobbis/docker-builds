#!/usr/bin/env bash

if [ -z "$mysql_options" ]; then
    mysql_options='--protocol=socket --user=root --host=localhost --socket=/var/run/mysqld/mysqld.sock --comments'
fi

_mysql_passfile() {
	# echo the password to the "file" the client uses
	# the client command will use process substitution to create a file on the fly
	# ie: --defaults-extra-file=<( _mysql_passfile )
	if [ '--dont-use-mysql-root-password' != "$1" ] && [ -n "$MYSQL_ROOT_PASSWORD" ]; then
		cat <<-EOF
			[client]
			password="${MYSQL_ROOT_PASSWORD}"
		EOF
	fi
}

if ! type 'execute' &>/dev/null; then
    # Execute mysql file
    # file can be passed directly or by HEREDOC
    execute() {
        local statement=""
        local message=""
        local dbname="$(get_db_name "$1")"
        local file="$1"

        if [ -f "$file" ]; then
            statement="/*!40000 DROP DATABASE IF EXISTS \`${dbname}\`*/; \
                        CREATE DATABASE /*!32312 IF NOT EXISTS*/ \`${dbname}\` \
                        /*!40100 DEFAULT CHARACTER SET utf8mb4 */;"
            message=$(mysql --defaults-extra-file=<( _mysql_passfile ) -ss $mysql_options -e "$statement" 2>&1 >/dev/null)

            if [ -z "$message" ] ; then
                message=$(mysql --defaults-extra-file=<( _mysql_passfile ) -ss --database="$dbname" $mysql_options < "$file" 2>&1 >/dev/null)
            fi
        fi

        if [ -n "$message" ] ; then
            echo "$message"
            mysql --defaults-extra-file=<( _mysql_passfile ) -ss $mysql_options -e "DROP DATABASE IF EXISTS $dbname" &> /dev/null
            sleep 1
        else
            echo "OK"
        fi
    }
fi

if ! type 'execute_old' &>/dev/null; then
    # Execute mysql statement
    # statement can be passed directly or by HEREDOC
    execute_old() {
        local dbname=""
        local message=""
        local statement="$@"

        if [ -n "$statement" ]; then
            if [ -f "$statement" ]; then
                dbname=$(grep -i "create database" $statement | awk -v FS="(\`|\`)" '{print $2}')
                message=$(wait_for_mysql_server_is_started && mysql --defaults-extra-file=<( _mysql_passfile ) -ss $mysql_options < "$statement" 2>&1 >/dev/null)
           else
                dbname=$(echo $statement | grep -i "create database" | awk -v FS="(\`|\`)" '{print $2}')
                message=$(wait_for_mysql_server_is_started && mysql --defaults-extra-file=<( _mysql_passfile ) -ss $mysql_options -e "$statement" 2>&1 >/dev/null)
            fi
        else
            dbname=$(cat /dev/stdin | grep -i "create database" | awk -v FS="(\`|\`)" '{print $2}')
            message=$(wait_for_mysql_server_is_started && mysql --defaults-extra-file=<( _mysql_passfile ) -ss $mysql_options "$statement" 2>&1 >/dev/null)
        fi

        if [ -n "$message" ] ; then
            echo "$message"
            wait_for_mysql_server_is_started && mysql --defaults-extra-file=<( _mysql_passfile ) -ss $mysql_options -e "DROP DATABASE IF EXISTS $dbname" &> /dev/null
            sleep 1
        else
            echo "OK"
        fi
    }
fi

get_db_name() {
    local filename="$1"
    echo "$(basename "$filename" | sed 's/\(.*\)\..*/\1/')"
}

wait_for_mysql_server_is_started() {
    echo -n "Wait for database server is started: "
    for i in {60..0}; do
        if mysqladmin -uroot -hlocalhost -p$MYSQL_ROOT_PASSWORD --protocol=tcp ping &>/dev/null; then
            echo " started"
            break
        fi
        echo -n "."
        sleep 2
    done
    if [ "$i" = 0 ]; then
        echo " Unable to start server."
        exit 1
    fi
}

echo 'MySQL init process in progress...'

wait_for_mysql_server_is_started

if [ ! "${MYSQL_MAJOR}" = '5.7' ]; then
    mysql --defaults-extra-file=<( _mysql_passfile ) -ss $mysql_options -e "SET GLOBAL default_collation_for_utf8mb4=utf8mb4_general_ci;"
fi

for f in /docker-entrypoint-initdb.d/*; do
    filename=$(basename "$f")
    case "$f" in
        *.sh)     echo "executing: $filename"; . "$f" ;;
        *.sql)    echo "restoring: $filename -" $(execute "$f") ;;
        *.sql.gz) echo -n "restoring: $filename -"
            if [ -f "/docker-entrypoint-initdb.d/$(get_db_name "$filename")" ]; then
                echo " skipped, while SQL file found with the same name!"
            else
                gunzip -c "$f" > "/tmp/$(get_db_name "$filename")" && execute "/tmp/$(get_db_name "$filename")" && rm -f "/tmp/$(get_db_name "$filename")" || rm -f "/tmp/$(get_db_name "$filename")"
            fi
            ;;
        *)        echo "ignoring: $filename" ;;
    esac
done
